LogLevel auth_openidc:debug

# (Mandatory)
# Set a password for crypto purposes, this is used for:
# - encryption of the (temporary) state cookie
# - encryption of cache entries, that may include the session cookie, see: OIDCCacheEncrypt and OIDCSessionType
# Note that an encrypted cache mechanism can be shared between servers if they use the same OIDCCryptoPassphrase
OIDCCryptoPassphrase rr)qtqb<nWGss.[b_VLN

# URL where OpenID Connect Provider metadata can be found (e.g. https://accounts.google.com/.well-known/openid-configuration)
# The obtained metadata will be cached and refreshed every 24 hours.
# If set, individual entries below will not have to be configured but can be used to add
# extra entries/endpoints to settings obtained from the metadata.
# If OIDCProviderMetadataURL is not set, the entries below it will have to be configured for a single
# static OP configuration or OIDCMetadataDir will have to be set for configuration of multiple OPs.
OIDCProviderMetadataURL ${BASE_URL_SSO}/auth/realms/megalis/.well-known/openid-configuration

# Only used for a single static provider has been configured, see below in OpenID Connect Provider.
# Client identifier used in calls to the statically configured OpenID Connect Provider.
OIDCClientID open-data-back

# Only used for a single static provider has been configured, see below in OpenID Connect Provider.
# Client secret used in calls to the statically configured OpenID Connect Provider.
# (not used/required in the Implicit Client Profile, i.e. when OIDCResponseType is "id_token")

# Pour éviter de rendre paramétrage le secret, mettre ce dernier à jour à la main dans la base keycloak :
# update CLIENT set SECRET = '74ca42ca-0175-4439-8e70-5e03e56f74be' where CLIENT_ID = 'apache-test';
# relancer keyclaok pour la prise en compte
OIDCClientSecret xxxxxx-xxxxx-xxxx-xxxxx-xxx

# (Mandatory)
# The redirect_uri for this OpenID Connect client; this is a vanity URL
# that must ONLY point to a path on your server protected by this module
# but it must NOT point to any actual content that needs to be served.
# You can use a relative URL like /protected/redirect_uri if you want to
# support multiple vhosts that belong to the same security domain in a dynamic way
OIDCRedirectURI /oauth2callback

# The claim that is used when setting the REMOTE_USER variable on OpenID Connect protected paths.
# If the claim name is postfixed with a \"@\", the claim value will be post-fixed with the
# \"iss\" value value (with leading "https://" stripped) to make this value unique across different OPs.
# When not defined the default "sub@" is used.
#
# An optional regular expression can be added as a 2nd parameter that will be applied to the
# resulting value from the 1st parameter and the first match returned from that expression will
# be set as the REMOTE_USER. E.g. to strip a domain from an e-mail style address you'd use ^(.*)@
#
# An optional 3rd parameter can be added that would contain string with number backrefrences.
# Backrefrences must be in the form $1, $2.. etc.
# E.g. to extract username in the form DOMAIN\userid from e-mail style address you may use
#  ^(.*)@([^.]+)\..+$ $2\\$1
OIDCRemoteUserClaim preferred_username

<Location /private-old>
AuthType openid-connect
Require valid-user
</Location>

<Location /oauth2callback>
AuthType openid-connect
Require valid-user
</Location>


LimitRequestFieldSize 16384
